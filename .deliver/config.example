#!/usr/bin/env bash

APP="invoices" # name of your release

BUILD_HOST="host" # host where to build the release
BUILD_USER="root" # local user at build host
BUILD_AT="~/build" # build directory on build host

STAGING_HOSTS="host" # staging / test hosts separated by space
STAGING_USER="root" # local user at staging hosts
TEST_AT="~/staging" # deploy directory on staging hosts. default is DELIVER_TO

PRODUCTION_HOSTS="deploy1.acme.org deploy2.acme.org" # deploy / production hosts separated by space
PRODUCTION_USER="production" # local user at deploy hosts
DELIVER_TO="~/opt/my-erlang-app" # deploy directory on production hosts

AUTO_VERSION=commit-count
SKIP_MIX_CLEAN=true
GIT_CLEAN_PATHS="rel .deliver/releases"
# SKIP_GIT_CLEAN=true


## comment out this section if you dont want to deploy prod.secret.exs to remote host
pre_erlang_get_and_update_deps() {
  # copy it from the local machine to the build host when builing
  local _local_secret_config_file="config/prod.secret.exs"
  if [ "$TARGET_MIX_ENV" = "prod" ]; then
    status "Copying '$_local_secret_config_file' file to build host"
    scp "$_local_secret_config_file" "$BUILD_USER@$BUILD_HOST:$BUILD_AT/config/prod.secret.exs"
  fi
}

pre_erlang_clean_compile() {
  status "Running npm install"
  __sync_remote "
    [ -f ~/.profile ] && source ~/.profile
    set -e
    cd '$BUILD_AT'
    npm install $SILENCE
  "

  status "Running brunch build"
  __sync_remote "
    [ -f ~/.profile ] && source ~/.profile
    set -e
    cd '$BUILD_AT'
    node_modules/brunch/bin/brunch build --production $SILENCE
  "

  status "Running phoenix.digest"
  __sync_remote "
    [ -f ~/.profile ] && source ~/.profile
    set -e
    cd '$BUILD_AT'
    mkdir -p priv/static
    if [ \"$BUILD_CMD\" = \"mix\" ]; then
      APP=\"$APP\" MIX_ENV=\"$TARGET_MIX_ENV\" $MIX_CMD do phoenix.digest $SILENCE
    fi
  "
}
